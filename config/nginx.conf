# Refferecne link with good Nginx optimazations
# https://www.netguru.com/codestories/nginx-tutorial-performance

# Required for Docker, comment this for direct source hosting
daemon off;

#user  nobody;

#Change to the number of cores on host (not required)
worker_processes  1;

# ngnix error logging, This will be configured for Docker
error_log /dev/stdout info;

# Comment the above and uncomment the below for debugging (Will cause lag)
# error_log /dev/stdout debug;

#pid var/nginx.pid;

events {
    worker_connections  1024;
}

# RTMP service
rtmp {
        server {
                listen 1935;
                chunk_size 4096;

                application live {
                        live on;

                        # recording to ./recordings dosnt seem to have any benefit to the user at the moment.
                        # Admin would need to upload the .flv on the users bahalve which is not ideal...
                        # Default is off, however switching this on will download save all uploads to ./recordings
                        record off;
                        # record all;
                        record_append on;
                        record_suffix &%Y%m%d%H%M%S.flv;
                        record_path /app/recordings;

                        on_publish http://nodetube:3000/livestream/on-live-auth;
                        on_publish_done http://nodetube:3000/livestream/on-live-done;

                        hls on;
                        hls_path /app/hls;
                        hls_playlist_length 60s;
                        hls_fragment 3s;

                        # #Re-renderer - unimplemented for now
                        # exec ffmpeg -i rtmp://localhost:1935/stream/$name
                        #     -c:a libfdk_aac -b:a 128k -c:v libx264 -b:v 2500k -f flv -g 30 -r 30 -s 1280x720 -preset superfast -profile:v baseline rtmp://localhost:1935/hls/$name_720p2628kbs
                        #     -c:a libfdk_aac -b:a 128k -c:v libx264 -b:v 1000k -f flv -g 30 -r 30 -s 854x480 -preset superfast -profile:v baseline rtmp://localhost:1935/hls/$name_480p1128kbs
                        #     -c:a libfdk_aac -b:a 128k -c:v libx264 -b:v 750k -f flv -g 30 -r 30 -s 640x360 -preset superfast -profile:v baseline rtmp://localhost:1935/hls/$name_360p878kbs
                        #     -c:a libfdk_aac -b:a 128k -c:v libx264 -b:v 400k -f flv -g 30 -r 30 -s 426x240 -preset superfast -profile:v baseline rtmp://localhost:1935/hls/$name_240p528kbs
                        #     -c:a libfdk_aac -b:a 64k -c:v libx264 -b:v 200k -f flv -g 15 -r 15 -s 426x240 -preset superfast -profile:v baseline rtmp://localhost:1935/hls/$name_240p264kbs;

                }
                # #hls implemented as a seperate app - unimplemented
                # application hls {
                #     live on;
                #     hls on;
                #     hls_fragment_naming system;
                #     hls_fragment 5;
                #     hls_playlist_length 10;
                #     hls_path /app/hls;
                #     hls_nested on;

                #     hls_variant _720p2628kbs BANDWIDTH=2628000,RESOLUTION=1280x720;
                #     hls_variant _480p1128kbs BANDWIDTH=1128000,RESOLUTION=854x480;
                #     hls_variant _360p878kbs BANDWIDTH=878000,RESOLUTION=640x360;
                #     hls_variant _240p528kbs BANDWIDTH=528000,RESOLUTION=426x240;
                #     hls_variant _240p264kbs BANDWIDTH=264000,RESOLUTION=426x240;
                # }
        }
}


http {
    include mime.types;
    default_type application/octet-stream;

    access_log /dev/stdout combined;

    # Optimization to copy Object to cache and pass pointer instead of whole object
    # Provides a signifigant boost to network throughput.
    sendfile on;

    # Wait until maximum size (MSS) is reached and then send to client
    # sendfile must be on for this option to work
    tcp_nopush on;

    # Legacy solution to reduce TCP overhead and send packets as soon as possible
    # Will cause additonal delay of approx 200ms when off but ensures ACK is recevied
    # additionally tcp_nopush conflicts with tcp_nodelay
    tcp_nodelay off;
    
    # Kill session after 65 second of no response
    keepalive_timeout  65;

    # If SSL is enabled
    ssl_ciphers         HIGH:!aNULL:!MD5;
    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
    ssl_session_cache   shared:SSL:10m;
    ssl_session_timeout 10m;


    server {
    	listen 80;
    	listen [::]:80;

    	server_name _;

        # Uncomment these lines to enable SSL.
        # Update the ssl paths with your own certificate and private key.

        # listen 443 ssl;
        # ssl_certificate     /opt/certs/example.com.crt;
        # ssl_certificate_key /opt/certs/example.com.key;

        error_page  405     =200 $uri;

        # Bad Bot Blocker - SOURCE NOT FOUND, Need to get this from Anthony
        # include /etc/nginx/bots.d/ddos.conf;
        # include /etc/nginx/bots.d/blockbots.conf;

        root /app;

        # maybe this isn't the best place for this
        # add_header Access-Control-Allow-Origin *;

        location /hls {
            # Disable cache
            add_header Cache-Control no-cache;
            #add_header Access-Control-Allow-Origin *;

            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
            }

            root /app;

            # CORS setup
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length';

            # allow CORS preflight requests
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }

        location /uploads {
            gzip off;
            sendfile on;
            sendfile_max_chunk 1m;
            tcp_nopush on;
            try_files $uri @redirect;
        }

        location @redirect {
            proxy_pass http://nodetube:3000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location / {
            proxy_pass http://nodetube:3000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }

    client_max_body_size 3000M;
    limit_req_zone $binary_remote_addr zone=flood:50m rate=90r/s;
}
